{
  "project": "protocols",
  "success": false,
  "total_checks": 5,
  "passed": 0,
  "failed": 5,
  "failures": [
    {
      "check": "Test Execution",
      "error": "Tests failed: ERROR: usage: pytest [options] [file_or_dir] [file_or_dir] [...]\npytest: error: unrecognized arguments: --cov=src --cov-report=json --cov-report=term\n  inifile: /home/vincent/Documents/Momo/WorkSpace/projects/core/protocols/pyproject.toml\n  rootdir: /home/vincent/Documents/Momo/WorkSpace/projects/core/protocols\n\n"
    },
    {
      "check": "Ruff Linting",
      "error": "Linting issues: F401 [*] `typing.Union` imported but unused\n --> src/protocols/aggregator.py:6:57\n  |\n5 | import time\n6 | from typing import Dict, List, Any, Optional, Callable, Union\n  |                                                         ^^^^^\n7 | from dataclasses import dataclass\n8 | from collections import defaultdict\n  |\nhelp: Remove unused import: `typing.Union`\n\nF401 [*] `typing.Tuple` imported but unused\n --> src/protocols/analyzer.py:6:47\n  |\n5 | import time\n6 | from typing import Dict, List, Any, Optional, Tuple\n  |                                               ^^^^^\n7 | import numpy as np\n8 | from scipy import stats\n  |\nhelp: Remove unused import: `typing.Tuple`\n\nF401 [*] `collections.defaultdict` imported but unused\n  --> src/protocols/analyzer.py:9:25\n   |\n 7 | import numpy as np\n 8 | from scipy import stats\n 9 | from collections import defaultdict\n   |                         ^^^^^^^^^^^\n10 | from dataclasses import dataclass\n   |\nhelp: Remove unused import: `collections.defaultdict`\n\nF401 [*] `.collector.MetricPoint` imported but unused\n  --> src/protocols/analyzer.py:12:36\n   |\n10 | from dataclasses import dataclass\n11 |\n12 | from .collector import MetricType, MetricPoint, MetricSeries\n   |                                    ^^^^^^^^^^^\n   |\nhelp: Remove unused import: `.collector.MetricPoint`\n\nF401 [*] `asyncio` imported but unused\n --> src/protocols/collector.py:6:8\n  |\n4 | \"\"\"\n5 |\n6 | import asyncio\n  |        ^^^^^^^\n7 | import time\n8 | import threading\n  |\nhelp: Remove unused import: `asyncio`\n\nF401 [*] `typing.Set` imported but unused\n  --> src/protocols/integration/integration_manager.py:8:57\n   |\n 6 | import asyncio\n 7 | import time\n 8 | from typing import Dict, List, Any, Optional, Callable, Set\n   |                                                         ^^^\n 9 | from dataclasses import dataclass, field\n10 | from pathlib import Path\n   |\nhelp: Remove unused import: `typing.Set`\n\nE722 Do not use bare `except`\n   --> src/protocols/integration/integration_manager.py:158:13\n    |\n156 |                     hooks.append(\"ai_performance_monitoring\")\n157 |                     break\n158 |             except:\n    |             ^^^^^^\n159 |                 continue\n    |\n\nF401 [*] `typing.Optional` imported but unused\n --> src/protocols/integration/monitoring_dashboard.py:7:37\n  |\n6 | import time\n7 | from typing import Dict, List, Any, Optional\n  |                                     ^^^^^^^^\n8 | from dataclasses import dataclass\n9 | import json\n  |\nhelp: Remove unused import: `typing.Optional`\n\nF401 [*] `json` imported but unused\n --> src/protocols/integration/monitoring_dashboard.py:9:8\n  |\n7 | from typing import Dict, List, Any, Optional\n8 | from dataclasses import dataclass\n9 | import json\n  |        ^^^^\n  |\nhelp: Remove unused import: `json`\n\nF401 [*] `json` imported but unused\n  --> src/protocols/optimizer_protocol.py:8:8\n   |\n 6 | import asyncio\n 7 | import time\n 8 | import json\n   |        ^^^^\n 9 | from typing import Dict, List, Any, Optional, Callable, Set\n10 | from dataclasses import dataclass, field\n   |\nhelp: Remove unused import: `json`\n\nF401 [*] `typing.Set` imported but unused\n  --> src/protocols/optimizer_protocol.py:9:57\n   |\n 7 | import time\n 8 | import json\n 9 | from typing import Dict, List, Any, Optional, Callable, Set\n   |                                                         ^^^\n10 | from dataclasses import dataclass, field\n11 | from enum import Enum\n   |\nhelp: Remove unused import: `typing.Set`\n\nF401 [*] `typing.Optional` imported but unused\n  --> src/protocols/orchestration/orchestrator.py:8:37\n   |\n 6 | import asyncio\n 7 | import time\n 8 | from typing import Dict, List, Any, Optional\n   |                                     ^^^^^^^^\n 9 | from dataclasses import dataclass\n10 | from enum import Enum\n   |\nhelp: Remove unused import: `typing.Optional`\n\nF401 [*] `json` imported but unused\n  --> src/protocols/orchestration/orchestrator.py:11:8\n   |\n 9 | from dataclasses import dataclass\n10 | from enum import Enum\n11 | import json\n   |        ^^^^\n   |\nhelp: Remove unused import: `json`\n\nF841 Local variable `registry_data` is assigned to but never used\n   --> src/protocols/orchestration/orchestrator.py:201:9\n    |\n199 |         \"\"\"Update service registry with current state\"\"\"\n200 |         # Update service registry (would integrate with actual service registry)\n201 |         registry_data = {\n    |         ^^^^^^^^^^^^^\n202 |             \"services\": {\n203 |                 service_id: {\n    |\nhelp: Remove assignment to unused variable `registry_data`\n\nFound 14 errors.\n[*] 12 fixable with the `--fix` option (1 hidden fix can be enabled with the `--unsafe-fixes` option).\n"
    },
    {
      "check": "MyPy Type Check",
      "error": "Type errors: src/protocols/integration/monitoring_dashboard.py:26: error: Function is missing a return type annotation  [no-untyped-def]\nsrc/protocols/integration/monitoring_dashboard.py:26: note: Use \"-> None\" if function does not return a value\nsrc/protocols/optimizer_protocol.py:15: error: Module \"protocols.ai_protocol\" has no attribute \"AIProtocol\"  [attr-defined]\nsrc/protocols/optimizer_protocol.py:74: error: Missing type parameters for generic type \"Callable\"  [type-arg]\nsrc/protocols/optimizer_protocol.py:93: error: Missing type parameters for generic type \"Queue\"  [type-arg]\nsrc/protocols/optimizer_protocol.py:94: error: Missing type parameters for generic type \"Queue\"  [type-arg]\nsrc/protocols/optimizer_protocol.py:123: error: Missing type parameters for generic type \"Callable\"  [type-arg]\nsrc/protocols/orchestration/orchestrator.py:40: error: Function is missing a return type annotation  [no-untyped-def]\nsrc/protocols/orchestration/orchestrator.py:40: note: Use \"-> None\" if function does not return a value\nsrc/protocols/orchestration/orchestrator.py:186: error: Argument \"service_id\" to \"ServiceInfo\" has incompatible type \"object\"; expected \"str\"  [arg-type]\nsrc/protocols/orchestration/orchestrator.py:187: error: Argument \"service_type\" to \"ServiceInfo\" has incompatible type \"object\"; expected \"str\"  [arg-type]\nsrc/protocols/orchestration/orchestrator.py:188: error: Argument \"status\" to \"ServiceInfo\" has incompatible type \"object\"; expected \"ServiceStatus\"  [arg-type]\nsrc/protocols/orchestration/orchestrator.py:191: error: Argument \"configuration\" to \"ServiceInfo\" has incompatible type \"object\"; expected \"dict[str, Any]\"  [arg-type]\nsrc/protocols/orchestration/orchestrator.py:192: error: No overload variant of \"get\" of \"dict\" matches argument types \"object\", \"list[Never]\"  [call-overload]\nsrc/protocols/orchestration/orchestrator.py:192: note: Possible overload variants:\nsrc/protocols/orchestration/orchestrator.py:192: note:     def get(self, str, None = ..., /) -> list[str] | None\nsrc/protocols/orchestration/orchestrator.py:192: note:     def get(self, str, list[str], /) -> list[str]\nsrc/protocols/orchestration/orchestrator.py:192: note:     def [_T] get(self, str, _T, /) -> list[str] | _T\nsrc/protocols/orchestration/orchestrator.py:195: error: Invalid index type \"object\" for \"dict[str, ServiceInfo]\"; expected type \"str\"  [index]\nsrc/protocols/orchestration/orchestrator.py:373: error: Incompatible return value type (got \"object\", expected \"dict[str, Any]\")  [return-value]\nsrc/protocols/orchestration/orchestrator.py:402: error: Need type annotation for \"service_loads\" (hint: \"service_loads: dict[<type>, <type>] = ...\")  [var-annotated]\nsrc/protocols/orchestration/__init__.py:4: error: Cannot find implementation or library stub for module named \"protocols.orchestration.service_discovery\"  [import-not-found]\nsrc/protocols/orchestration/__init__.py:5: error: Cannot find implementation or library stub for module named \"protocols.orchestration.health_monitor\"  [import-not-found]\nsrc/protocols/integration/integration_manager.py:14: error: Cannot find implementation or library stub for module named \"ai_optimizer\"  [import-not-found]\nsrc/protocols/integration/integration_manager.py:15: error: Cannot find implementation or library stub for module named \"performance_metrics\"  [import-not-found]\nsrc/protocols/integration/integration_manager.py:18: error: Cannot assign to a type  [misc]\nsrc/protocols/integration/integration_manager.py:18: error: Incompatible types in assignment (expression has type \"None\", variable has type \"type[OptimizerProtocol]\")  [assignment]\nsrc/protocols/integration/integration_manager.py:64: error: Missing type parameters for generic type \"Callable\"  [type-arg]\nsrc/protocols/integration/integration_manager.py:268: error: Missing type parameters for generic type \"Callable\"  [type-arg]\nsrc/protocols/integration/integration_manager.py:270: error: Function is missing a return type annotation  [no-untyped-def]\nsrc/protocols/integration/integration_manager.py:270: note: Use \"-> None\" if function does not return a value\nsrc/protocols/integration/integration_manager.py:281: error: Missing type parameters for generic type \"Callable\"  [type-arg]\nsrc/protocols/integration/integration_manager.py:283: error: Function is missing a return type annotation  [no-untyped-def]\nsrc/protocols/integration/integration_manager.py:283: note: Use \"-> None\" if function does not return a value\nsrc/protocols/integration/integration_manager.py:294: error: Missing type parameters for generic type \"Callable\"  [type-arg]\nsrc/protocols/integration/integration_manager.py:296: error: Function is missing a return type annotation  [no-untyped-def]\nsrc/protocols/integration/integration_manager.py:296: note: Use \"-> None\" if function does not return a value\nsrc/protocols/integration/integration_manager.py:307: error: Missing type parameters for generic type \"Callable\"  [type-arg]\nsrc/protocols/integration/integration_manager.py:309: error: Function is missing a return type annotation  [no-untyped-def]\nsrc/protocols/integration/integration_manager.py:309: note: Use \"-> None\" if function does not return a value\nsrc/protocols/integration/integration_manager.py:431: error: Function \"OptimizerProtocol\" could always be true in boolean context  [truthy-function]\nsrc/protocols/integration/integration_manager.py:432: error: Incompatible types in assignment (expression has type \"OptimizerProtocol\", variable has type \"None\")  [assignment]\nsrc/protocols/integration/integration_manager.py:444: error: Returning Any from function declared to return \"dict[str, Any]\"  [no-any-return]\nsrc/protocols/collector.py:43: error: Missing type parameters for generic type \"deque\"  [type-arg]\nsrc/protocols/collector.py:57: error: Missing type parameters for generic type \"Callable\"  [type-arg]\nsrc/protocols/collector.py:58: error: Missing type parameters for generic type \"Callable\"  [type-arg]\nsrc/protocols/collector.py:170: error: Missing type parameters for generic type \"Callable\"  [type-arg]\nsrc/protocols/collector.py:174: error: Missing type parameters for generic type \"Callable\"  [type-arg]\nsrc/protocols/collector.py:220: error: Dict entry 1 has incompatible type \"str\": \"floating[Any]\"; expected \"str\": \"float\"  [dict-item]\nsrc/protocols/collector.py:221: error: Dict entry 2 has incompatible type \"str\": \"floating[Any]\"; expected \"str\": \"float\"  [dict-item]\nsrc/protocols/collector.py:222: error: Dict entry 3 has incompatible type \"str\": \"floating[Any]\"; expected \"str\": \"float\"  [dict-item]\nsrc/protocols/collector.py:225: error: Dict entry 6 has incompatible type \"str\": \"floating[Any]\"; expected \"str\": \"float\"  [dict-item]\nsrc/protocols/collector.py:226: error: Dict entry 7 has incompatible type \"str\": \"floating[Any]\"; expected \"str\": \"float\"  [dict-item]\nsrc/protocols/collector.py:280: error: Need type annotation for \"metric_type_counts\"  [var-annotated]\nsrc/protocols/integration/__init__.py:4: error: Cannot find implementation or library stub for module named \"protocols.integration.data_collector\"  [import-not-found]\nsrc/protocols/integration/__init__.py:4: note: See https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-imports\nsrc/protocols/integration/__init__.py:5: error: Cannot find implementation or library stub for module named \"protocols.integration.command_distributor\"  [import-not-found]\nsrc/protocols/tracker.py:47: error: Missing type parameters for generic type \"deque\"  [type-arg]\nsrc/protocols/tracker.py:258: error: Need type annotation for \"drifts_by_metric\" (hint: \"drifts_by_metric: dict[<type>, <type>] = ...\")  [var-annotated]\nsrc/protocols/analyzer.py:8: error: Library stubs not installed for \"scipy\"  [import-untyped]\nsrc/protocols/analyzer.py:8: note: Hint: \"python3 -m pip install scipy-stubs\"\nsrc/protocols/analyzer.py:8: note: (or run \"mypy --install-types\" to install all missing stub packages)\nsrc/protocols/analyzer.py:30: error: Function is missing a return type annotation  [no-untyped-def]\nsrc/protocols/analyzer.py:30: note: Use \"-> None\" if function does not return a value\nsrc/protocols/analyzer.py:52: error: Unsupported target for indexed assignment (\"object\")  [index]\nsrc/protocols/analyzer.py:227: error: Argument 1 to \"_analyze_volatility_trend\" of \"MetricsAnalyzer\" has incompatible type \"list[floating[Any]]\"; expected \"list[float]\"  [arg-type]\nsrc/protocols/analyzer.py:300: error: Need type annotation for \"correlations\" (hint: \"correlations: dict[<type>, <type>] = ...\")  [var-annotated]\nsrc/protocols/aggregator.py:43: error: Function is missing a return type annotation  [no-untyped-def]\nsrc/protocols/aggregator.py:43: note: Use \"-> None\" if function does not return a value\nsrc/protocols/aggregator.py:46: error: Missing type parameters for generic type \"Callable\"  [type-arg]\nsrc/protocols/aggregator.py:56: error: Missing type parameters for generic type \"Callable\"  [type-arg]\nsrc/protocols/aggregator.py:191: error: No overload variant of \"min\" matches argument types \"floating[Any] | float64\", \"float\"  [call-overload]\nsrc/protocols/aggregator.py:191: note: Possible overload variants:\nsrc/protocols/aggregator.py:191: note:     def [SupportsRichComparisonT: SupportsDunderLT[Any] | SupportsDunderGT[Any]] min(SupportsRichComparisonT, SupportsRichComparisonT, /, *_args: SupportsRichComparisonT, key: None = ...) -> SupportsRichComparisonT\nsrc/protocols/aggregator.py:191: note:     def [_T] min(_T, _T, /, *_args: _T, key: Callable[[_T], SupportsDunderLT[Any] | SupportsDunderGT[Any]]) -> _T\nsrc/protocols/aggregator.py:191: note:     def [SupportsRichComparisonT: SupportsDunderLT[Any] | SupportsDunderGT[Any]] min(Iterable[SupportsRichComparisonT], /, *, key: None = ...) -> SupportsRichComparisonT\nsrc/protocols/aggregator.py:191: note:     def [_T] min(Iterable[_T], /, *, key: Callable[[_T], SupportsDunderLT[Any] | SupportsDunderGT[Any]]) -> _T\nsrc/protocols/aggregator.py:191: note:     def [SupportsRichComparisonT: SupportsDunderLT[Any] | SupportsDunderGT[Any], _T] min(Iterable[SupportsRichComparisonT], /, *, key: None = ..., default: _T) -> SupportsRichComparisonT | _T\nsrc/protocols/aggregator.py:191: note:     def [_T1, _T2] min(Iterable[_T1], /, *, key: Callable[[_T1], SupportsDunderLT[Any] | SupportsDunderGT[Any]], default: _T2) -> _T1 | _T2\nsrc/protocols/aggregator.py:278: error: Value of type variable \"SupportsRichComparisonT\" of \"max\" cannot be \"floating[Any] | float\"  [type-var]\nFound 58 errors in 10 files (checked 17 source files)\n"
    },
    {
      "check": "File Size Critical",
      "error": "Files exceed 500-line absolute max: protocols/integration/integration_manager.py: 503 lines"
    },
    {
      "check": "Project Count Violation",
      "error": "Found 0 projects, expected 5"
    }
  ]
}