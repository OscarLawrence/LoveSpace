{"$message_type":"diagnostic","message":"unused imports: `Expr` and `Stmt`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":612,"byte_end":616,"line_start":14,"line_end":14,"column_start":36,"column_end":40,"is_primary":true,"text":[{"text":"use rustpython_parser::ast::{self, Stmt, Expr};","highlight_start":36,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/lib.rs","byte_start":618,"byte_end":622,"line_start":14,"line_end":14,"column_start":42,"column_end":46,"is_primary":true,"text":[{"text":"use rustpython_parser::ast::{self, Stmt, Expr};","highlight_start":42,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":610,"byte_end":622,"line_start":14,"line_end":14,"column_start":34,"column_end":46,"is_primary":true,"text":[{"text":"use rustpython_parser::ast::{self, Stmt, Expr};","highlight_start":34,"highlight_end":46}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `Expr` and `Stmt`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:14:36\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse rustpython_parser::ast::{self, Stmt, Expr};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"use of deprecated function `rustpython_parser::parse_program`: Use ast::Suite::parse from rustpython_parser::Parse trait.","code":{"code":"deprecated","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":4633,"byte_end":4646,"line_start":132,"line_end":132,"column_start":28,"column_end":41,"is_primary":true,"text":[{"text":"        rustpython_parser::parse_program(code, \"input.py\")","highlight_start":28,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(deprecated)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: use of deprecated function `rustpython_parser::parse_program`: Use ast::Suite::parse from rustpython_parser::Parse trait.\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:132:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m132\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        rustpython_parser::parse_program(code, \"input.py\")\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(deprecated)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no field `body` on type `Vec<rustpython_parser::rustpython_ast::Stmt>`","code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":4150,"byte_end":4154,"line_start":119,"line_end":119,"column_start":26,"column_end":30,"is_primary":true,"text":[{"text":"        for stmt in &ast.body {","highlight_start":26,"highlight_end":30}],"label":"unknown field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m: no field `body` on type `Vec<rustpython_parser::rustpython_ast::Stmt>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:119:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m119\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        for stmt in &ast.body {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munknown field\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `FunctionDef` does not have fields named `name`, `body`","code":{"code":"E0026","explanation":"A struct pattern attempted to extract a nonexistent field from a struct.\n\nErroneous code example:\n\n```compile_fail,E0026\nstruct Thing {\n    x: u32,\n    y: u32,\n}\n\nlet thing = Thing { x: 0, y: 0 };\n\nmatch thing {\n    Thing { x, z } => {} // error: `Thing::z` field doesn't exist\n}\n```\n\nIf you are using shorthand field patterns but want to refer to the struct field\nby a different name, you should rename it explicitly. Struct fields are\nidentified by the name used before the colon `:` so struct patterns should\nresemble the declaration of the struct type being matched.\n\n```\nstruct Thing {\n    x: u32,\n    y: u32,\n}\n\nlet thing = Thing { x: 0, y: 0 };\n\nmatch thing {\n    Thing { x, y: z } => {} // we renamed `y` to `z`\n}\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":5162,"byte_end":5166,"line_start":146,"line_end":146,"column_start":47,"column_end":51,"is_primary":true,"text":[{"text":"        if let ast::Stmt::FunctionDef { name, body, .. } = function {","highlight_start":47,"highlight_end":51}],"label":"variant `FunctionDef` does not have these fields","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/lib.rs","byte_start":5156,"byte_end":5160,"line_start":146,"line_end":146,"column_start":41,"column_end":45,"is_primary":true,"text":[{"text":"        if let ast::Stmt::FunctionDef { name, body, .. } = function {","highlight_start":41,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0026]\u001b[0m\u001b[0m\u001b[1m: variant `FunctionDef` does not have fields named `name`, `body`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:146:41\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if let ast::Stmt::FunctionDef { name, body, .. } = function {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mvariant `FunctionDef` does not have these fields\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `rustpython_parser::rustpython_ast::Stmt::Return` does not have a field named `value`","code":{"code":"E0026","explanation":"A struct pattern attempted to extract a nonexistent field from a struct.\n\nErroneous code example:\n\n```compile_fail,E0026\nstruct Thing {\n    x: u32,\n    y: u32,\n}\n\nlet thing = Thing { x: 0, y: 0 };\n\nmatch thing {\n    Thing { x, z } => {} // error: `Thing::z` field doesn't exist\n}\n```\n\nIf you are using shorthand field patterns but want to refer to the struct field\nby a different name, you should rename it explicitly. Struct fields are\nidentified by the name used before the colon `:` so struct patterns should\nresemble the declaration of the struct type being matched.\n\n```\nstruct Thing {\n    x: u32,\n    y: u32,\n}\n\nlet thing = Thing { x: 0, y: 0 };\n\nmatch thing {\n    Thing { x, y: z } => {} // we renamed `y` to `z`\n}\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":5860,"byte_end":5865,"line_start":167,"line_end":167,"column_start":33,"column_end":38,"is_primary":true,"text":[{"text":"            ast::Stmt::Return { value: Some(expr), .. } => {","highlight_start":33,"highlight_end":38}],"label":"variant `rustpython_parser::rustpython_ast::Stmt::Return` does not have this field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`rustpython_parser::rustpython_ast::Stmt::Return` has a field named `0`","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":5860,"byte_end":5865,"line_start":167,"line_end":167,"column_start":33,"column_end":38,"is_primary":true,"text":[{"text":"            ast::Stmt::Return { value: Some(expr), .. } => {","highlight_start":33,"highlight_end":38}],"label":null,"suggested_replacement":"0","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0026]\u001b[0m\u001b[0m\u001b[1m: variant `rustpython_parser::rustpython_ast::Stmt::Return` does not have a field named `value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:167:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m167\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            ast::Stmt::Return { value: Some(expr), .. } => {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mvariant `rustpython_parser::rustpython_ast::Stmt::Return` does not have this field\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: `rustpython_parser::rustpython_ast::Stmt::Return` has a field named `0`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `rustpython_parser::rustpython_ast::Stmt::Assert` does not have a field named `test`","code":{"code":"E0026","explanation":"A struct pattern attempted to extract a nonexistent field from a struct.\n\nErroneous code example:\n\n```compile_fail,E0026\nstruct Thing {\n    x: u32,\n    y: u32,\n}\n\nlet thing = Thing { x: 0, y: 0 };\n\nmatch thing {\n    Thing { x, z } => {} // error: `Thing::z` field doesn't exist\n}\n```\n\nIf you are using shorthand field patterns but want to refer to the struct field\nby a different name, you should rename it explicitly. Struct fields are\nidentified by the name used before the colon `:` so struct patterns should\nresemble the declaration of the struct type being matched.\n\n```\nstruct Thing {\n    x: u32,\n    y: u32,\n}\n\nlet thing = Thing { x: 0, y: 0 };\n\nmatch thing {\n    Thing { x, y: z } => {} // we renamed `y` to `z`\n}\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":6131,"byte_end":6135,"line_start":172,"line_end":172,"column_start":33,"column_end":37,"is_primary":true,"text":[{"text":"            ast::Stmt::Assert { test, .. } => {","highlight_start":33,"highlight_end":37}],"label":"variant `rustpython_parser::rustpython_ast::Stmt::Assert` does not have this field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`rustpython_parser::rustpython_ast::Stmt::Assert` has a field named `0`","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":6131,"byte_end":6135,"line_start":172,"line_end":172,"column_start":33,"column_end":37,"is_primary":true,"text":[{"text":"            ast::Stmt::Assert { test, .. } => {","highlight_start":33,"highlight_end":37}],"label":null,"suggested_replacement":"0","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0026]\u001b[0m\u001b[0m\u001b[1m: variant `rustpython_parser::rustpython_ast::Stmt::Assert` does not have a field named `test`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:172:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m172\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            ast::Stmt::Assert { test, .. } => {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mvariant `rustpython_parser::rustpython_ast::Stmt::Assert` does not have this field\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: `rustpython_parser::rustpython_ast::Stmt::Assert` has a field named `0`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `Assign` does not have fields named `targets`, `value`","code":{"code":"E0026","explanation":"A struct pattern attempted to extract a nonexistent field from a struct.\n\nErroneous code example:\n\n```compile_fail,E0026\nstruct Thing {\n    x: u32,\n    y: u32,\n}\n\nlet thing = Thing { x: 0, y: 0 };\n\nmatch thing {\n    Thing { x, z } => {} // error: `Thing::z` field doesn't exist\n}\n```\n\nIf you are using shorthand field patterns but want to refer to the struct field\nby a different name, you should rename it explicitly. Struct fields are\nidentified by the name used before the colon `:` so struct patterns should\nresemble the declaration of the struct type being matched.\n\n```\nstruct Thing {\n    x: u32,\n    y: u32,\n}\n\nlet thing = Thing { x: 0, y: 0 };\n\nmatch thing {\n    Thing { x, y: z } => {} // we renamed `y` to `z`\n}\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":6381,"byte_end":6386,"line_start":177,"line_end":177,"column_start":42,"column_end":47,"is_primary":true,"text":[{"text":"            ast::Stmt::Assign { targets, value, .. } => {","highlight_start":42,"highlight_end":47}],"label":"variant `Assign` does not have these fields","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/lib.rs","byte_start":6372,"byte_end":6379,"line_start":177,"line_end":177,"column_start":33,"column_end":40,"is_primary":true,"text":[{"text":"            ast::Stmt::Assign { targets, value, .. } => {","highlight_start":33,"highlight_end":40}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0026]\u001b[0m\u001b[0m\u001b[1m: variant `Assign` does not have fields named `targets`, `value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:177:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            ast::Stmt::Assign { targets, value, .. } => {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mvariant `Assign` does not have these fields\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `Call` does not have a field named `func`","code":{"code":"E0026","explanation":"A struct pattern attempted to extract a nonexistent field from a struct.\n\nErroneous code example:\n\n```compile_fail,E0026\nstruct Thing {\n    x: u32,\n    y: u32,\n}\n\nlet thing = Thing { x: 0, y: 0 };\n\nmatch thing {\n    Thing { x, z } => {} // error: `Thing::z` field doesn't exist\n}\n```\n\nIf you are using shorthand field patterns but want to refer to the struct field\nby a different name, you should rename it explicitly. Struct fields are\nidentified by the name used before the colon `:` so struct patterns should\nresemble the declaration of the struct type being matched.\n\n```\nstruct Thing {\n    x: u32,\n    y: u32,\n}\n\nlet thing = Thing { x: 0, y: 0 };\n\nmatch thing {\n    Thing { x, y: z } => {} // we renamed `y` to `z`\n}\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":6914,"byte_end":6918,"line_start":192,"line_end":192,"column_start":31,"column_end":35,"is_primary":true,"text":[{"text":"            ast::Expr::Call { func, .. } => {","highlight_start":31,"highlight_end":35}],"label":"variant `Call` does not have this field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`Call` has a field named `0`","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":6914,"byte_end":6918,"line_start":192,"line_end":192,"column_start":31,"column_end":35,"is_primary":true,"text":[{"text":"            ast::Expr::Call { func, .. } => {","highlight_start":31,"highlight_end":35}],"label":null,"suggested_replacement":"0","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0026]\u001b[0m\u001b[0m\u001b[1m: variant `Call` does not have a field named `func`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:192:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m192\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            ast::Expr::Call { func, .. } => {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mvariant `Call` does not have this field\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: `Call` has a field named `0`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `rustpython_parser::rustpython_ast::Expr::Name` does not have a field named `id`","code":{"code":"E0026","explanation":"A struct pattern attempted to extract a nonexistent field from a struct.\n\nErroneous code example:\n\n```compile_fail,E0026\nstruct Thing {\n    x: u32,\n    y: u32,\n}\n\nlet thing = Thing { x: 0, y: 0 };\n\nmatch thing {\n    Thing { x, z } => {} // error: `Thing::z` field doesn't exist\n}\n```\n\nIf you are using shorthand field patterns but want to refer to the struct field\nby a different name, you should rename it explicitly. Struct fields are\nidentified by the name used before the colon `:` so struct patterns should\nresemble the declaration of the struct type being matched.\n\n```\nstruct Thing {\n    x: u32,\n    y: u32,\n}\n\nlet thing = Thing { x: 0, y: 0 };\n\nmatch thing {\n    Thing { x, y: z } => {} // we renamed `y` to `z`\n}\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":7210,"byte_end":7212,"line_start":199,"line_end":199,"column_start":31,"column_end":33,"is_primary":true,"text":[{"text":"            ast::Expr::Name { id, .. } => {","highlight_start":31,"highlight_end":33}],"label":"variant `rustpython_parser::rustpython_ast::Expr::Name` does not have this field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`rustpython_parser::rustpython_ast::Expr::Name` has a field named `0`","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":7210,"byte_end":7212,"line_start":199,"line_end":199,"column_start":31,"column_end":33,"is_primary":true,"text":[{"text":"            ast::Expr::Name { id, .. } => {","highlight_start":31,"highlight_end":33}],"label":null,"suggested_replacement":"0","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0026]\u001b[0m\u001b[0m\u001b[1m: variant `rustpython_parser::rustpython_ast::Expr::Name` does not have a field named `id`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:199:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m199\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            ast::Expr::Name { id, .. } => {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mvariant `rustpython_parser::rustpython_ast::Expr::Name` does not have this field\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: `rustpython_parser::rustpython_ast::Expr::Name` has a field named `0`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `rustpython_parser::rustpython_ast::Expr::Name` does not have a field named `id`","code":{"code":"E0026","explanation":"A struct pattern attempted to extract a nonexistent field from a struct.\n\nErroneous code example:\n\n```compile_fail,E0026\nstruct Thing {\n    x: u32,\n    y: u32,\n}\n\nlet thing = Thing { x: 0, y: 0 };\n\nmatch thing {\n    Thing { x, z } => {} // error: `Thing::z` field doesn't exist\n}\n```\n\nIf you are using shorthand field patterns but want to refer to the struct field\nby a different name, you should rename it explicitly. Struct fields are\nidentified by the name used before the colon `:` so struct patterns should\nresemble the declaration of the struct type being matched.\n\n```\nstruct Thing {\n    x: u32,\n    y: u32,\n}\n\nlet thing = Thing { x: 0, y: 0 };\n\nmatch thing {\n    Thing { x, y: z } => {} // we renamed `y` to `z`\n}\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":6971,"byte_end":6973,"line_start":193,"line_end":193,"column_start":42,"column_end":44,"is_primary":true,"text":[{"text":"                if let ast::Expr::Name { id, .. } = func.as_ref() {","highlight_start":42,"highlight_end":44}],"label":"variant `rustpython_parser::rustpython_ast::Expr::Name` does not have this field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`rustpython_parser::rustpython_ast::Expr::Name` has a field named `0`","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":6971,"byte_end":6973,"line_start":193,"line_end":193,"column_start":42,"column_end":44,"is_primary":true,"text":[{"text":"                if let ast::Expr::Name { id, .. } = func.as_ref() {","highlight_start":42,"highlight_end":44}],"label":null,"suggested_replacement":"0","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0026]\u001b[0m\u001b[0m\u001b[1m: variant `rustpython_parser::rustpython_ast::Expr::Name` does not have a field named `id`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:193:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m193\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                if let ast::Expr::Name { id, .. } = func.as_ref() {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mvariant `rustpython_parser::rustpython_ast::Expr::Name` does not have this field\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: `rustpython_parser::rustpython_ast::Expr::Name` has a field named `0`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"tuple variant `ast::Expr::Compare` written as struct variant","code":{"code":"E0769","explanation":"A tuple struct or tuple variant was used in a pattern as if it were a struct or\nstruct variant.\n\nErroneous code example:\n\n```compile_fail,E0769\nenum E {\n    A(i32),\n}\n\nlet e = E::A(42);\n\nmatch e {\n    E::A { number } => { // error!\n        println!(\"{}\", number);\n    }\n}\n```\n\nTo fix this error, you can use the tuple pattern:\n\n```\n# enum E {\n#     A(i32),\n# }\n# let e = E::A(42);\nmatch e {\n    E::A(number) => { // ok!\n        println!(\"{}\", number);\n    }\n}\n```\n\nAlternatively, you can also use the struct pattern by using the correct field\nnames and binding them to new identifiers:\n\n```\n# enum E {\n#     A(i32),\n# }\n# let e = E::A(42);\nmatch e {\n    E::A { 0: number } => { // ok!\n        println!(\"{}\", number);\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":7518,"byte_end":7563,"line_start":209,"line_end":209,"column_start":13,"column_end":58,"is_primary":true,"text":[{"text":"            ast::Expr::Compare { left, ops, comparators } => {","highlight_start":13,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use the tuple variant pattern syntax instead","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":7536,"byte_end":7563,"line_start":209,"line_end":209,"column_start":31,"column_end":58,"is_primary":true,"text":[{"text":"            ast::Expr::Compare { left, ops, comparators } => {","highlight_start":31,"highlight_end":58}],"label":null,"suggested_replacement":"(_)","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0769]\u001b[0m\u001b[0m\u001b[1m: tuple variant `ast::Expr::Compare` written as struct variant\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:209:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m209\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            ast::Expr::Compare { left, ops, comparators } => {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use the tuple variant pattern syntax instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m209\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            ast::Expr::Compare\u001b[0m\u001b[0m\u001b[38;5;9m { left, ops, comparators }\u001b[0m\u001b[0m => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m209\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            ast::Expr::Compare\u001b[0m\u001b[0m\u001b[38;5;10m(_)\u001b[0m\u001b[0m => {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `FunctionDef` does not have fields named `name`, `args`, `returns`, `body`","code":{"code":"E0026","explanation":"A struct pattern attempted to extract a nonexistent field from a struct.\n\nErroneous code example:\n\n```compile_fail,E0026\nstruct Thing {\n    x: u32,\n    y: u32,\n}\n\nlet thing = Thing { x: 0, y: 0 };\n\nmatch thing {\n    Thing { x, z } => {} // error: `Thing::z` field doesn't exist\n}\n```\n\nIf you are using shorthand field patterns but want to refer to the struct field\nby a different name, you should rename it explicitly. Struct fields are\nidentified by the name used before the colon `:` so struct patterns should\nresemble the declaration of the struct type being matched.\n\n```\nstruct Thing {\n    x: u32,\n    y: u32,\n}\n\nlet thing = Thing { x: 0, y: 0 };\n\nmatch thing {\n    Thing { x, y: z } => {} // we renamed `y` to `z`\n}\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":9384,"byte_end":9388,"line_start":256,"line_end":256,"column_start":62,"column_end":66,"is_primary":true,"text":[{"text":"        if let ast::Stmt::FunctionDef { name, args, returns, body, .. } = function {","highlight_start":62,"highlight_end":66}],"label":"variant `FunctionDef` does not have these fields","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/lib.rs","byte_start":9363,"byte_end":9367,"line_start":256,"line_end":256,"column_start":41,"column_end":45,"is_primary":true,"text":[{"text":"        if let ast::Stmt::FunctionDef { name, args, returns, body, .. } = function {","highlight_start":41,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/lib.rs","byte_start":9369,"byte_end":9373,"line_start":256,"line_end":256,"column_start":47,"column_end":51,"is_primary":true,"text":[{"text":"        if let ast::Stmt::FunctionDef { name, args, returns, body, .. } = function {","highlight_start":47,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/lib.rs","byte_start":9375,"byte_end":9382,"line_start":256,"line_end":256,"column_start":53,"column_end":60,"is_primary":true,"text":[{"text":"        if let ast::Stmt::FunctionDef { name, args, returns, body, .. } = function {","highlight_start":53,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0026]\u001b[0m\u001b[0m\u001b[1m: variant `FunctionDef` does not have fields named `name`, `args`, `returns`, `body`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:256:41\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m256\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if let ast::Stmt::FunctionDef { name, args, returns, body, .. } = function {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mvariant `FunctionDef` does not have these fields\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"tuple variant `ast::Stmt::Expr` written as struct variant","code":{"code":"E0769","explanation":"A tuple struct or tuple variant was used in a pattern as if it were a struct or\nstruct variant.\n\nErroneous code example:\n\n```compile_fail,E0769\nenum E {\n    A(i32),\n}\n\nlet e = E::A(42);\n\nmatch e {\n    E::A { number } => { // error!\n        println!(\"{}\", number);\n    }\n}\n```\n\nTo fix this error, you can use the tuple pattern:\n\n```\n# enum E {\n#     A(i32),\n# }\n# let e = E::A(42);\nmatch e {\n    E::A(number) => { // ok!\n        println!(\"{}\", number);\n    }\n}\n```\n\nAlternatively, you can also use the struct pattern by using the correct field\nnames and binding them to new identifiers:\n\n```\n# enum E {\n#     A(i32),\n# }\n# let e = E::A(42);\nmatch e {\n    E::A { 0: number } => { // ok!\n        println!(\"{}\", number);\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":10276,"byte_end":10301,"line_start":279,"line_end":279,"column_start":24,"column_end":49,"is_primary":true,"text":[{"text":"                if let ast::Stmt::Expr { value } = first_stmt {","highlight_start":24,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use the tuple variant pattern syntax instead","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":10291,"byte_end":10301,"line_start":279,"line_end":279,"column_start":39,"column_end":49,"is_primary":true,"text":[{"text":"                if let ast::Stmt::Expr { value } = first_stmt {","highlight_start":39,"highlight_end":49}],"label":null,"suggested_replacement":"(value)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0769]\u001b[0m\u001b[0m\u001b[1m: tuple variant `ast::Stmt::Expr` written as struct variant\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:279:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m279\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                if let ast::Stmt::Expr { value } = first_stmt {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use the tuple variant pattern syntax instead\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m279\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                if let ast::Stmt::Expr\u001b[0m\u001b[0m\u001b[38;5;9m { value }\u001b[0m\u001b[0m = first_stmt {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m279\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m                if let ast::Stmt::Expr\u001b[0m\u001b[0m\u001b[38;5;10m(value)\u001b[0m\u001b[0m = first_stmt {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `rustpython_parser::rustpython_ast::Expr::Constant` does not have a field named `value`","code":{"code":"E0026","explanation":"A struct pattern attempted to extract a nonexistent field from a struct.\n\nErroneous code example:\n\n```compile_fail,E0026\nstruct Thing {\n    x: u32,\n    y: u32,\n}\n\nlet thing = Thing { x: 0, y: 0 };\n\nmatch thing {\n    Thing { x, z } => {} // error: `Thing::z` field doesn't exist\n}\n```\n\nIf you are using shorthand field patterns but want to refer to the struct field\nby a different name, you should rename it explicitly. Struct fields are\nidentified by the name used before the colon `:` so struct patterns should\nresemble the declaration of the struct type being matched.\n\n```\nstruct Thing {\n    x: u32,\n    y: u32,\n}\n\nlet thing = Thing { x: 0, y: 0 };\n\nmatch thing {\n    Thing { x, y: z } => {} // we renamed `y` to `z`\n}\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":10366,"byte_end":10371,"line_start":280,"line_end":280,"column_start":50,"column_end":55,"is_primary":true,"text":[{"text":"                    if let ast::Expr::Constant { value: ast::Constant::Str(docstring), .. } = value.as_ref() {","highlight_start":50,"highlight_end":55}],"label":"variant `rustpython_parser::rustpython_ast::Expr::Constant` does not have this field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`rustpython_parser::rustpython_ast::Expr::Constant` has a field named `0`","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":10366,"byte_end":10371,"line_start":280,"line_end":280,"column_start":50,"column_end":55,"is_primary":true,"text":[{"text":"                    if let ast::Expr::Constant { value: ast::Constant::Str(docstring), .. } = value.as_ref() {","highlight_start":50,"highlight_end":55}],"label":null,"suggested_replacement":"0","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0026]\u001b[0m\u001b[0m\u001b[1m: variant `rustpython_parser::rustpython_ast::Expr::Constant` does not have a field named `value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:280:50\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m280\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    if let ast::Expr::Constant { value: ast::Constant::Str(docstring), .. } = value.as_ref() {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mvariant `rustpython_parser::rustpython_ast::Expr::Constant` does not have this field\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: `rustpython_parser::rustpython_ast::Expr::Constant` has a field named `0`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":10568,"byte_end":10577,"line_start":282,"line_end":282,"column_start":71,"column_end":80,"is_primary":true,"text":[{"text":"                        self.parse_docstring_contracts(&mut contract, docstring)?;","highlight_start":71,"highlight_end":80}],"label":"expected `&str`, found `String`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/lib.rs","byte_start":10527,"byte_end":10552,"line_start":282,"line_end":282,"column_start":30,"column_end":55,"is_primary":false,"text":[{"text":"                        self.parse_docstring_contracts(&mut contract, docstring)?;","highlight_start":30,"highlight_end":55}],"label":"arguments to this method are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"src/lib.rs","byte_start":11325,"byte_end":11340,"line_start":305,"line_end":305,"column_start":74,"column_end":89,"is_primary":false,"text":[{"text":"    fn parse_docstring_contracts(&self, contract: &mut FunctionContract, docstring: &str) -> Result<()> {","highlight_start":74,"highlight_end":89}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/lib.rs","byte_start":11259,"byte_end":11284,"line_start":305,"line_end":305,"column_start":8,"column_end":33,"is_primary":true,"text":[{"text":"    fn parse_docstring_contracts(&self, contract: &mut FunctionContract, docstring: &str) -> Result<()> {","highlight_start":8,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"consider borrowing here","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":10568,"byte_end":10568,"line_start":282,"line_end":282,"column_start":71,"column_end":71,"is_primary":true,"text":[{"text":"                        self.parse_docstring_contracts(&mut contract, docstring)?;","highlight_start":71,"highlight_end":71}],"label":null,"suggested_replacement":"&","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:282:71\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m282\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        self.parse_docstring_contracts(&mut contract, docstring)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `&str`, found `String`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this method are incorrect\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:305:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m305\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn parse_docstring_contracts(&self, contract: &mut FunctionContract, docstring: &str) -> Result<()> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider borrowing here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m282\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        self.parse_docstring_contracts(&mut contract, \u001b[0m\u001b[0m\u001b[38;5;10m&\u001b[0m\u001b[0mdocstring)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                       \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `rustpython_parser::rustpython_ast::Expr::Name` does not have a field named `id`","code":{"code":"E0026","explanation":"A struct pattern attempted to extract a nonexistent field from a struct.\n\nErroneous code example:\n\n```compile_fail,E0026\nstruct Thing {\n    x: u32,\n    y: u32,\n}\n\nlet thing = Thing { x: 0, y: 0 };\n\nmatch thing {\n    Thing { x, z } => {} // error: `Thing::z` field doesn't exist\n}\n```\n\nIf you are using shorthand field patterns but want to refer to the struct field\nby a different name, you should rename it explicitly. Struct fields are\nidentified by the name used before the colon `:` so struct patterns should\nresemble the declaration of the struct type being matched.\n\n```\nstruct Thing {\n    x: u32,\n    y: u32,\n}\n\nlet thing = Thing { x: 0, y: 0 };\n\nmatch thing {\n    Thing { x, y: z } => {} // we renamed `y` to `z`\n}\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":10888,"byte_end":10890,"line_start":295,"line_end":295,"column_start":31,"column_end":33,"is_primary":true,"text":[{"text":"            ast::Expr::Name { id, .. } => Ok(id.clone()),","highlight_start":31,"highlight_end":33}],"label":"variant `rustpython_parser::rustpython_ast::Expr::Name` does not have this field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`rustpython_parser::rustpython_ast::Expr::Name` has a field named `0`","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":10888,"byte_end":10890,"line_start":295,"line_end":295,"column_start":31,"column_end":33,"is_primary":true,"text":[{"text":"            ast::Expr::Name { id, .. } => Ok(id.clone()),","highlight_start":31,"highlight_end":33}],"label":null,"suggested_replacement":"0","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0026]\u001b[0m\u001b[0m\u001b[1m: variant `rustpython_parser::rustpython_ast::Expr::Name` does not have a field named `id`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:295:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m295\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            ast::Expr::Name { id, .. } => Ok(id.clone()),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mvariant `rustpython_parser::rustpython_ast::Expr::Name` does not have this field\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: `rustpython_parser::rustpython_ast::Expr::Name` has a field named `0`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variant `Subscript` does not have fields named `value`, `slice`","code":{"code":"E0026","explanation":"A struct pattern attempted to extract a nonexistent field from a struct.\n\nErroneous code example:\n\n```compile_fail,E0026\nstruct Thing {\n    x: u32,\n    y: u32,\n}\n\nlet thing = Thing { x: 0, y: 0 };\n\nmatch thing {\n    Thing { x, z } => {} // error: `Thing::z` field doesn't exist\n}\n```\n\nIf you are using shorthand field patterns but want to refer to the struct field\nby a different name, you should rename it explicitly. Struct fields are\nidentified by the name used before the colon `:` so struct patterns should\nresemble the declaration of the struct type being matched.\n\n```\nstruct Thing {\n    x: u32,\n    y: u32,\n}\n\nlet thing = Thing { x: 0, y: 0 };\n\nmatch thing {\n    Thing { x, y: z } => {} // we renamed `y` to `z`\n}\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":10958,"byte_end":10963,"line_start":296,"line_end":296,"column_start":43,"column_end":48,"is_primary":true,"text":[{"text":"            ast::Expr::Subscript { value, slice, .. } => {","highlight_start":43,"highlight_end":48}],"label":"variant `Subscript` does not have these fields","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/lib.rs","byte_start":10951,"byte_end":10956,"line_start":296,"line_end":296,"column_start":36,"column_end":41,"is_primary":true,"text":[{"text":"            ast::Expr::Subscript { value, slice, .. } => {","highlight_start":36,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0026]\u001b[0m\u001b[0m\u001b[1m: variant `Subscript` does not have fields named `value`, `slice`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:296:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m296\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            ast::Expr::Subscript { value, slice, .. } => {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mvariant `Subscript` does not have these fields\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"lifetime may not live long enough","code":null,"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":4789,"byte_end":4790,"line_start":136,"line_end":136,"column_start":46,"column_end":47,"is_primary":false,"text":[{"text":"    fn extract_function_from_ast(&self, ast: &ast::Suite) -> Result<&ast::Stmt> {","highlight_start":46,"highlight_end":47}],"label":"let's call the lifetime of this reference `'1`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/lib.rs","byte_start":4777,"byte_end":4778,"line_start":136,"line_end":136,"column_start":34,"column_end":35,"is_primary":false,"text":[{"text":"    fn extract_function_from_ast(&self, ast: &ast::Suite) -> Result<&ast::Stmt> {","highlight_start":34,"highlight_end":35}],"label":"let's call the lifetime of this reference `'2`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/lib.rs","byte_start":4933,"byte_end":4941,"line_start":139,"line_end":139,"column_start":24,"column_end":32,"is_primary":true,"text":[{"text":"                return Ok(stmt);","highlight_start":24,"highlight_end":32}],"label":"method was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider introducing a named lifetime parameter and update trait if needed","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":4813,"byte_end":4813,"line_start":136,"line_end":136,"column_start":70,"column_end":70,"is_primary":true,"text":[{"text":"    fn extract_function_from_ast(&self, ast: &ast::Suite) -> Result<&ast::Stmt> {","highlight_start":70,"highlight_end":70}],"label":null,"suggested_replacement":"'a ","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/lib.rs","byte_start":4790,"byte_end":4790,"line_start":136,"line_end":136,"column_start":47,"column_end":47,"is_primary":true,"text":[{"text":"    fn extract_function_from_ast(&self, ast: &ast::Suite) -> Result<&ast::Stmt> {","highlight_start":47,"highlight_end":47}],"label":null,"suggested_replacement":"'a ","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"src/lib.rs","byte_start":4776,"byte_end":4776,"line_start":136,"line_end":136,"column_start":33,"column_end":33,"is_primary":true,"text":[{"text":"    fn extract_function_from_ast(&self, ast: &ast::Suite) -> Result<&ast::Stmt> {","highlight_start":33,"highlight_end":33}],"label":null,"suggested_replacement":"<'a>","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: lifetime may not live long enough\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:139:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m136\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn extract_function_from_ast(&self, ast: &ast::Suite) -> Result<&ast::Stmt> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mlet's call the lifetime of this reference `'1`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mlet's call the lifetime of this reference `'2`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                return Ok(stmt);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider introducing a named lifetime parameter and update trait if needed\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m136\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn extract_function_from_ast\u001b[0m\u001b[0m\u001b[38;5;10m<'a>\u001b[0m\u001b[0m(&self, ast: &\u001b[0m\u001b[0m\u001b[38;5;10m'a \u001b[0m\u001b[0mast::Suite) -> Result<&\u001b[0m\u001b[0m\u001b[38;5;10m'a \u001b[0m\u001b[0mast::Stmt> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[38;5;10m++++\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[38;5;10m++\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[38;5;10m++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `targets`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":7813,"byte_end":7820,"line_start":217,"line_end":217,"column_start":34,"column_end":41,"is_primary":true,"text":[{"text":"    fn analyze_assignment(&self, targets: &[ast::Expr], value: &ast::Expr) -> Result<String> {","highlight_start":34,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":7813,"byte_end":7820,"line_start":217,"line_end":217,"column_start":34,"column_end":41,"is_primary":true,"text":[{"text":"    fn analyze_assignment(&self, targets: &[ast::Expr], value: &ast::Expr) -> Result<String> {","highlight_start":34,"highlight_end":41}],"label":null,"suggested_replacement":"_targets","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `targets`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:217:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn analyze_assignment(&self, targets: &[ast::Expr], value: &ast::Expr) -> Result<String> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_targets`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `value`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":7836,"byte_end":7841,"line_start":217,"line_end":217,"column_start":57,"column_end":62,"is_primary":true,"text":[{"text":"    fn analyze_assignment(&self, targets: &[ast::Expr], value: &ast::Expr) -> Result<String> {","highlight_start":57,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":7836,"byte_end":7841,"line_start":217,"line_end":217,"column_start":57,"column_end":62,"is_primary":true,"text":[{"text":"    fn analyze_assignment(&self, targets: &[ast::Expr], value: &ast::Expr) -> Result<String> {","highlight_start":57,"highlight_end":62}],"label":null,"suggested_replacement":"_value","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:217:57\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn analyze_assignment(&self, targets: &[ast::Expr], value: &ast::Expr) -> Result<String> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_value`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `function_name`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":8037,"byte_end":8050,"line_start":222,"line_end":222,"column_start":54,"column_end":67,"is_primary":true,"text":[{"text":"    fn extract_function_code(&self, full_code: &str, function_name: &str) -> Result<String> {","highlight_start":54,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":8037,"byte_end":8050,"line_start":222,"line_end":222,"column_start":54,"column_end":67,"is_primary":true,"text":[{"text":"    fn extract_function_code(&self, full_code: &str, function_name: &str) -> Result<String> {","highlight_start":54,"highlight_end":67}],"label":null,"suggested_replacement":"_function_name","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `function_name`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:222:54\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m222\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn extract_function_code(&self, full_code: &str, function_name: &str) -> Result<String> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_function_name`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `implementation`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":8362,"byte_end":8376,"line_start":232,"line_end":232,"column_start":9,"column_end":23,"is_primary":true,"text":[{"text":"        implementation: &ImplementationLogic,","highlight_start":9,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":8362,"byte_end":8376,"line_start":232,"line_end":232,"column_start":9,"column_end":23,"is_primary":true,"text":[{"text":"        implementation: &ImplementationLogic,","highlight_start":9,"highlight_end":23}],"label":null,"suggested_replacement":"_implementation","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `implementation`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:232:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m232\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        implementation: &ImplementationLogic,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_implementation`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: use of undeclared type `StmtKind`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared module or unlinked crate\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":4176,"byte_end":4184,"line_start":120,"line_end":120,"column_start":20,"column_end":28,"is_primary":true,"text":[{"text":"            if let StmtKind::FunctionDef { name, .. } = &stmt.node {","highlight_start":20,"highlight_end":28}],"label":"use of undeclared type `StmtKind`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `StmtKind`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:120:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m120\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            if let StmtKind::FunctionDef { name, .. } = &stmt.node {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared type `StmtKind`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 17 previous errors; 6 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 17 previous errors; 6 warnings emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0026, E0308, E0433, E0609, E0769.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0026, E0308, E0433, E0609, E0769.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0026`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0026`.\u001b[0m\n"}
